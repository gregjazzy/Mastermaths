// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  FREE
  DEMO
  PREMIUM
}

enum LessonType {
  VIDEO_COURS
  QCM
  CORRECTION_VIDEO
  CORRECTION_DOCUMENT  // Correction en PDF
  EXO_ECRIT
  DS                   // Devoir Surveillé
  CARTOGRAPHIE
  METHODE
}

model User {
  id                  String        @id @default(cuid())
  email               String        @unique
  emailsNotification  String[]      // Jusqu'à 3 emails (élève + parents/tuteurs)
  emailVerified       DateTime?
  hashedPassword      String?
  name                String?
  status              UserStatus    @default(FREE)
  isSubscribed        Boolean       @default(false)
  stripeCustomerId    String?       @unique
  subscriptionId      String?
  
  // Gamification
  currentTitle        String        @default("Apprenti Mathématicien") // Titre actuel de l'élève
  totalMasteryPoints  Int           @default(0) // Points de Maîtrise Historique (PMU)
  monthlyMasteryPoints Int          @default(0) // PMU du mois en cours
  weeklyMasteryPoints  Int          @default(0) // PMU de la semaine en cours
  lastMonthlyReset    DateTime?     // Dernière réinitialisation mensuelle
  lastWeeklyReset     DateTime?     // Dernière réinitialisation hebdomadaire
  
  // Connexions
  connectionDaysCount Int           @default(0) // Compteur de jours de connexion avec activité
  connectionStreak    Int           @default(0) // Jours consécutifs de connexion
  bestStreak          Int           @default(0) // Meilleur streak de l'utilisateur
  lastConnectionDate  DateTime?     // Dernière date de connexion comptabilisée
  lastReminderSentAt  DateTime?     // Dernière date d'envoi d'email de rappel
  
  // Badges et récompenses
  badgesUnlocked      String[]      // Liste des IDs/noms de badges obtenus
  hasFreeCourseReward Boolean       @default(false) // Éligible au cours particulier gratuit
  
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  
  performances        Performance[]
  accounts            Account[]
  sessions            Session[]
  connectionLogs      ConnectionLog[]
  
  @@map("users")
}

model ConnectionLog {
  id              String   @id @default(cuid())
  userId          String
  connectedAt     DateTime @default(now())
  disconnectedAt  DateTime?
  durationMinutes Int?     // Durée de la session en minutes
  ipAddress       String?  // Adresse IP (optionnel)
  userAgent       String?  // Navigateur/device (optionnel)
  
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, connectedAt])
  @@map("connection_logs")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Course {
  id          String    @id @default(cuid())
  title       String
  description String?   @db.Text
  order       Int       @default(0)
  isDemoContent Boolean @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  chapters    Chapter[]
  
  @@map("courses")
}

model Chapter {
  id                    String       @id @default(cuid())
  title                 String
  description           String?      @db.Text
  order                 Int          @default(0)
  courseId              String
  
  // Carte mentale de révision (optionnelle)
  mentalMapUrl          String?      // URL vers l'image de la carte mentale
  mentalMapTitle        String?      // Titre de la carte mentale
  mentalMapDescription  String?      @db.Text
  
  // Répertoire des grands lycées (optionnel)
  lyceesRepertoireUrl   String?      // URL vers le PDF du répertoire
  lyceesRepertoireTitle String?      // Titre du répertoire
  lyceesRepertoireDescription String? @db.Text
  
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt
  
  course                Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  subChapters           SubChapter[]
  
  @@map("chapters")
}

model SubChapter {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  order       Int      @default(0)
  chapterId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  chapter     Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  lessons     Lesson[]
  
  @@map("subchapters")
}

model Lesson {
  id                    String      @id @default(cuid())
  title                 String
  subChapterId          String
  type                  LessonType
  contentUrl            String?     // Vimeo URL, PDF URL, ou ID QCM
  vimeoVideoId          String?     // ID Vimeo pour les vidéos
  content               String?     @db.Text // Contenu textuel additionnel
  isCorrectionVideo     Boolean     @default(false)
  isCorrectionDocument  Boolean     @default(false) // TRUE si c'est une correction PDF
  linkedExerciseId      String?     // Lien vers l'exercice/DS/QCM correspondant
  prerequisiteLessonId  String?     // Leçon prérequise (doit être complétée avant)
  parentLessonId        String?     // Leçon parente (pour hiérarchie: Exercice 1 → QCM Ex1 → Correction Ex1)
  countForReporting     Boolean     @default(true) // Compter dans les statistiques/reporting
  isOptional            Boolean     @default(false) // Leçon optionnelle (pas de prérequis strict)
  order                 Int         @default(0)
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
  
  subChapter            SubChapter  @relation(fields: [subChapterId], references: [id], onDelete: Cascade)
  linkedExercise        Lesson?     @relation("ExerciseCorrection", fields: [linkedExerciseId], references: [id])
  corrections           Lesson[]    @relation("ExerciseCorrection")
  prerequisiteLesson    Lesson?     @relation("LessonPrerequisite", fields: [prerequisiteLessonId], references: [id])
  dependentLessons      Lesson[]    @relation("LessonPrerequisite")
  parentLesson          Lesson?     @relation("LessonHierarchy", fields: [parentLessonId], references: [id])
  childLessons          Lesson[]    @relation("LessonHierarchy")
  performances          Performance[]
  qcmQuestions          QcmQuestion[]
  
  @@map("lessons")
}

model QcmQuestion {
  id              String   @id @default(cuid())
  lessonId        String
  question        String   @db.Text
  options         String[] // Tableau de réponses possibles
  correctAnswer   Int?     // Index de la bonne réponse (0-3) - Pour QCM simple
  correctAnswers  Int[]    @default([]) // Indices des bonnes réponses - Pour QCM multiple
  isMultipleChoice Boolean @default(false) // TRUE si plusieurs réponses possibles
  explanation     String?  @db.Text
  order           Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  lesson          Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  @@map("qcm_questions")
}

model Performance {
  id                    String   @id @default(cuid())
  userId                String
  lessonId              String
  videoProgressPercent  Float    @default(0) // 0-100% pour Vidéo Cours OU Vidéo Correction
  quizScorePercent      Float?   // 0-100% pour QCM
  isCompleted           Boolean  @default(false) // Pour EXO_ECRIT, CARTOGRAPHIE, METHODE
  hasViewedCorrection   Boolean  @default(false) // TRUE si vu la vidéo de correction
  connectionDaysCount   Int      @default(0) // Compteur de jours où l'élève s'est connecté ET a suivi une lesson
  badgesUnlocked        String[] // Liste des badges obtenus pour cette performance
  lastAccessedAt        DateTime @default(now())
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson                Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  @@unique([userId, lessonId])
  @@map("performances")
}

model Badge {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?  @db.Text
  icon        String?  // URL ou nom d'icône
  criteria    Json     // Critères de déclenchement
  type        String   // Type de badge: "connection", "performance", "completion", etc.
  rarity      String   @default("common") // "common", "rare", "epic", "legendary", "secret"
  masteryPoints Int    @default(0) // Points de maîtrise accordés
  order       Int      @default(0)
  isSecret    Boolean  @default(false) // Badge secret (critères cachés)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("badges")
}

